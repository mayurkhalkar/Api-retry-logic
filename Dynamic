from datetime import datetime, timedelta
import re

def replace_date_in_url(url: str, date: str) -> str:
    # Detect the date pattern in the URL
    pattern_match = re.search(r'\{\{%([^}]+)\}\}', url)
    if not pattern_match:
        return url  # Return the URL as it is if no date pattern is found
    
    # Extract the date format from the pattern
    date_format = pattern_match.group(1)
    
    # Parse the input date string into a datetime object using the detected date format
    base_date = datetime.strptime(date, date_format)
    
    # Define a function to replace each matched placeholder with the correct date
    def replace_placeholder(match):
        # Extract the offset from the match if present
        offset_str = match.group(2)
        if offset_str:
            offset = int(offset_str)
        else:
            offset = 0
        # Calculate the new date with the offset
        new_date = base_date + timedelta(days=offset)
        # Return the new date as a string in the specified date format
        return new_date.strftime(date_format)
    
    # Use regex to find all placeholders and replace them using the replace_placeholder function
    updated_url = re.sub(r'\{\{%' + re.escape(date_format) + r'([+-]\d+)?\}\}', replace_placeholder, url)
    
    return updated_url

# Example usage
url = "https://support.google.com/mail/thread/121162166/start={{%Y-%m-%d}}anyotherstring{{%Y-%m-%d+2}}somehere{{%Y-%m-%d-1}}"
date = "2024-02-01"

result = replace_date_in_url(url, date)
print(result)  # Output: https://support.google.com/mail/thread/121162166/start=2024-02-01anyotherstring2024-02-03somehere2024-01-31

# Example usage where no date pattern is present
url_without_pattern = "https://support.google.com/mail/thread/121162166/start=anyotherstring"
result = replace_date_in_url(url_without_pattern, date)
print(result)  # Output: https://support.google.com/mail/thread/121162166/start=anyotherstring
