import requests
import time
import random

def make_khoros_request(url, headers, max_retries=5):
    delay = 1  # initial delay
    for attempt in range(max_retries):
        try:
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                response_data = response.json()
                if response_data.get('status') == 'complete':
                    return response_data.get('url')
                else:
                    raise Exception("Status is not complete")
            elif response.status_code in [429, 500, 502, 503, 504]:
                retry_after = response.headers.get('Retry-After')
                if retry_after:
                    delay = int(retry_after)
                else:
                    delay = min(delay * 2, 60)  # exponential backoff with a max delay of 60 seconds
                delay += random.uniform(0, 1)  # add jitter
                print(f"Retrying in {delay:.2f} seconds...")
                time.sleep(delay)
            else:
                response.raise_for_status()  # raise an error for other non-success status codes
        except requests.exceptions.RequestException as e:
            print(f"Request failed: {e}")
            if attempt < max_retries - 1:
                delay = min(delay * 2, 60)  # exponential backoff
                delay += random.uniform(0, 1)  # add jitter
                print(f"Retrying in {delay:.2f} seconds...")
                time.sleep(delay)
            else:
                raise  # re-raise the last exception if out of retries
    raise Exception("Maximum retries exceeded")

# Usage
url = "https://api.khoros.com/your-endpoint"
headers = {
    "Authorization": "Bearer YOUR_ACCESS_TOKEN"
}

try:
    complete_url = make_khoros_request(url, headers)
    print("Complete URL received:", complete_url)
except Exception as e:
    print("Failed to get data from Khoros API:", e)
